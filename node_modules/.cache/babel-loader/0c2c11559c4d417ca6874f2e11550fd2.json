{"ast":null,"code":"import { useState } from \"react\";\nexport const cohortName = '2110-VPI-WEB-PT';\nexport const API = `https://strangers-things.herokuapp.com/api/${cohortName}`; // export const [authToken, setAuthToken] = useState(\"\")\n\nexport async function getPosts() {\n  try {\n    const response = await fetch(`${API}/posts`);\n    const result = await response.json(); // console.log(result)\n\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function registerNew(regInfo) {\n  try {\n    const response = await fetch(`${API}/users/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(regInfo)\n    });\n    const result = await response.json();\n    console.log(result);\n  } catch (error) {\n    console.error('could not register', error);\n  }\n}\n;\nexport async function loginUser(loginInfo) {\n  fetch(`${API}/users/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(loginInfo)\n  }).then(response => response.json()).then(result => {\n    result.data.token ? localStorage.setItem(\"myToken\", result.data.token) : console.log(result);\n    console.log(result);\n    return result;\n  }).catch(console.error);\n}\nexport async function createPost(postInfo) {\n  fetch(`${API}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem(\"myToken\")}`\n    },\n    body: JSON.stringify(postInfo)\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n    return result;\n  }).catch(console.error);\n}","map":{"version":3,"sources":["/Users/kieran/Documents/Full Stack/course_work/Strangers.Things/src/api/index.js"],"names":["useState","cohortName","API","getPosts","response","fetch","result","json","error","registerNew","regInfo","method","headers","body","JSON","stringify","console","log","loginUser","loginInfo","then","data","token","localStorage","setItem","catch","createPost","postInfo","getItem"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,MAAMC,UAAU,GAAG,iBAAnB;AACP,OAAO,MAAMC,GAAG,GAAI,8CAA6CD,UAAW,EAArE,C,CAGP;;AAEA,OAAO,eAAeE,QAAf,GAA0B;AAC7B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,QAAR,CAA5B;AACA,UAAMI,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB,CAFE,CAGF;;AACA,WAAOD,MAAP;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF;AAGD,OAAO,eAAeC,WAAf,CAA4BC,OAA5B,EAAqC;AAC1C,MAAG;AACD,UAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,iBAAR,EAC5B;AACES,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACJL,OADI;AALR,KAD4B,CAA5B;AAWA,UAAMJ,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AACD,GAdD,CAcE,OAAOE,KAAP,EAAa;AACbQ,IAAAA,OAAO,CAACR,KAAR,CAAc,oBAAd,EAAoCA,KAApC;AACD;AACF;AAAA;AAED,OAAO,eAAeU,SAAf,CAA0BC,SAA1B,EAAoC;AAC3Cd,EAAAA,KAAK,CAAE,GAAEH,GAAI,cAAR,EAAsB;AACxBS,IAAAA,MAAM,EAAE,MADgB;AAExBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFe;AAKxBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAEJI,SAFI;AALkB,GAAtB,CAAL,CAUGC,IAVH,CAUQhB,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EAVpB,EAWEa,IAXF,CAWOd,MAAM,IAAG;AACbA,IAAAA,MAAM,CAACe,IAAP,CAAYC,KAAZ,GAAoBC,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgClB,MAAM,CAACe,IAAP,CAAYC,KAA5C,CAApB,GAAwEN,OAAO,CAACC,GAAR,CAAYX,MAAZ,CAAxE;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AACA,WAAOA,MAAP;AACD,GAfF,EAeImB,KAfJ,CAeUT,OAAO,CAACR,KAflB;AAgBA;AAGD,OAAO,eAAekB,UAAf,CAA2BC,QAA3B,EAAoC;AAC1CtB,EAAAA,KAAK,CAAE,GAAEH,GAAI,QAAR,EAAgB;AAClBS,IAAAA,MAAM,EAAE,MADU;AAElBC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAkB,UAASW,YAAY,CAACK,OAAb,CAAqB,SAArB,CAAgC;AAFpD,KAFS;AAMlBf,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAEJY,QAFI;AANY,GAAhB,CAAL,CAWGP,IAXH,CAWQhB,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EAXpB,EAYEa,IAZF,CAYOd,MAAM,IAAG;AACbU,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AACA,WAAOA,MAAP;AACD,GAfF,EAeImB,KAfJ,CAeUT,OAAO,CAACR,KAflB;AAgBA","sourcesContent":["import { useState } from \"react\";\nexport const cohortName = '2110-VPI-WEB-PT';\nexport const API = `https://strangers-things.herokuapp.com/api/${cohortName}`;\n\n\n// export const [authToken, setAuthToken] = useState(\"\")\n\nexport async function getPosts() {\n    try {\n      const response = await fetch(`${API}/posts`);\n      const result = await response.json();\n      // console.log(result)\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n\n  export async function registerNew (regInfo) {\n    try{\n      const response = await fetch(`${API}/users/register`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(\n          regInfo\n          ),\n      }\n      );\n      const result = await response.json();\n      console.log(result);\n    } catch (error){\n      console.error('could not register', error)\n    }\n  };\n\n  export async function loginUser (loginInfo){\n  fetch(`${API}/users/login`,{\n     method: 'POST',\n     headers: {\n       'Content-Type': 'application/json'\n     },\n     body: JSON.stringify\n     (\n       loginInfo\n       ),\n   }\n   ).then(response => response.json())\n   .then(result =>{\n     result.data.token ? localStorage.setItem(\"myToken\", result.data.token): console.log(result);\n     console.log(result)\n     return result;\n   }).catch(console.error);\n }\n  \n\n export async function createPost (postInfo){\n  fetch(`${API}/posts`,{\n     method: 'POST',\n     headers: {\n       'Content-Type': 'application/json',\n       'Authorization': `Bearer ${localStorage.getItem(\"myToken\")}`\n     },\n     body: JSON.stringify\n     (\n       postInfo\n       ),\n   }\n   ).then(response => response.json())\n   .then(result =>{\n     console.log(result)\n     return result;\n   }).catch(console.error);\n }\n"]},"metadata":{},"sourceType":"module"}