{"ast":null,"code":"var _jsxFileName = \"/Users/kieran/Documents/Full Stack/course_work/Strangers.Things/src/components/CreateMessage.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { callApi } from \"../api\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateMessage = props => {\n  _s();\n\n  const postId = props.postId;\n  const [message, setMessage] = useState(\"\");\n\n  const handleMessageSubmit = async event => {\n    event.preventDefault();\n\n    if (message === \"\") {\n      document.getElementById(\"float\").className = \"visible\";\n      document.getElementById(\"float\").innerText = \"Message Cannot Be Blank\";\n      setTimeout(function () {\n        document.getElementById(\"float\").className = \"hidden\";\n      }, 5000);\n      setMessage(\"\");\n      setClicked(false);\n    } else {\n      let messageInfo = {\n        message: {\n          content: `${message}`\n        }\n      };\n      console.log(message);\n      console.log(postId);\n      const data = await callApi({\n        url: `/posts/${postId}/messages`,\n        method: \"post\",\n        token: localStorage.getItem(\"myToken\"),\n        body: messageInfo\n      });\n      setMessage(\"\");\n      setClicked(false);\n\n      if (data.success) {\n        document.getElementById(\"float\").className = \"visible\";\n        document.getElementById(\"float\").innerText = \"Message Sent\";\n        setTimeout(function () {\n          document.getElementById(\"float\").className = \"hidden\";\n        }, 5000);\n      }\n    }\n  };\n\n  const handleMessageChange = event => {\n    setMessage(event.target.value);\n  };\n\n  const [clicked, setClicked] = useState(false);\n\n  const displayMessageForm = () => {\n    console.log(\"clicked\");\n    setClicked(true);\n  };\n\n  return clicked ? /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    sx: {\n      display: 'flex',\n      '& .MuiTextField-root': {\n        mt: .5,\n        width: '25ch'\n      }\n    },\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: handleMessageSubmit,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      required: true,\n      id: \"createmessage\",\n      multiline: true,\n      value: message,\n      onChange: handleMessageChange,\n      label: \"Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: {// display:\"flex\", \n        // flexDirection:\"row\", \n        // alignItems: 'flex-end' \n      },\n      size: \"small\",\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this) //         <div>\n  //     <form onSubmit={handleMessageSubmit}>\n  //         <label htmlFor=\"message\">Message:</label>\n  //         <input type=\"text\" name=\"message\" value={message} onChange={handleMessageChange}/>\n  //         <button type=\"submit\">Send Message</button>\n  //     </form>\n  // </div>\n  : /*#__PURE__*/_jsxDEV(Button, {\n    onClick: displayMessageForm,\n    size: \"small\",\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    children: \"Send a Message\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 1\n  }, this);\n};\n\n_s(CreateMessage, \"1wAPJ6DFVn1m6lnGyieT96Ev3AA=\");\n\n_c = CreateMessage;\nexport default CreateMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateMessage\");","map":{"version":3,"sources":["/Users/kieran/Documents/Full Stack/course_work/Strangers.Things/src/components/CreateMessage.js"],"names":["useEffect","useState","callApi","Box","TextField","Button","CreateMessage","props","postId","message","setMessage","handleMessageSubmit","event","preventDefault","document","getElementById","className","innerText","setTimeout","setClicked","messageInfo","content","console","log","data","url","method","token","localStorage","getItem","body","success","handleMessageChange","target","value","clicked","displayMessageForm","display","mt","width"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { callApi } from \"../api\"\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nconst CreateMessage = (props) =>{\n    const postId = props.postId\n    const [message, setMessage] = useState(\"\")\n    const handleMessageSubmit = async (event) => {\nevent.preventDefault()\nif(message === \"\"){\n    document.getElementById(\"float\").className=\"visible\";\n    document.getElementById(\"float\").innerText = \"Message Cannot Be Blank\"\n    setTimeout(function(){\n        document.getElementById(\"float\").className=\"hidden\";\n    },5000)\n    setMessage(\"\")\nsetClicked(false)\n} else {\nlet messageInfo = {\n    message: {\n        content: `${message}`\n    }\n}\nconsole.log(message)\nconsole.log(postId)\nconst data = await callApi({ url:`/posts/${postId}/messages`, method: \"post\", token: localStorage.getItem(\"myToken\"), body: messageInfo })\nsetMessage(\"\")\nsetClicked(false)\nif(data.success){\n    document.getElementById(\"float\").className=\"visible\"\n    document.getElementById(\"float\").innerText = \"Message Sent\"\n    setTimeout(function(){\n        document.getElementById(\"float\").className=\"hidden\";\n    },5000)\n}\n}\n    }\n\nconst handleMessageChange = (event) =>{\n    setMessage(event.target.value)\n}\nconst [clicked, setClicked] = useState(false) \nconst displayMessageForm = () =>{\n    console.log(\"clicked\")\n    setClicked(true)\n  \n\n}\n\n\n    return (\n        clicked ?\n        <Box component=\"form\"  sx={{ display: 'flex',\n            '& .MuiTextField-root': { mt:.5, width: '25ch' } \n          }} noValidate autoComplete=\"off\" onSubmit={handleMessageSubmit}>\n                <TextField \n                required id=\"createmessage\" \n                multiline value={message} \n                onChange={handleMessageChange} \n                label=\"Message:\" \n                />\n                <Button sx={{ \n                    // display:\"flex\", \n                    // flexDirection:\"row\", \n                    // alignItems: 'flex-end' \n                }}\n                    size=\"small\" \n                    variant=\"contained\" \n                    color=\"primary\" \n                    type=\"submit\">Send Message</Button>\n           \n        </Box>\n//         <div>\n//     <form onSubmit={handleMessageSubmit}>\n//         <label htmlFor=\"message\">Message:</label>\n//         <input type=\"text\" name=\"message\" value={message} onChange={handleMessageChange}/>\n//         <button type=\"submit\">Send Message</button>\n//     </form>\n// </div>\n: \n<Button onClick={displayMessageForm} size=\"small\"variant=\"contained\" color=\"primary\" type=\"submit\">Send a Message</Button>\n    )\n}\n\n\nexport default CreateMessage"]},"metadata":{},"sourceType":"module"}