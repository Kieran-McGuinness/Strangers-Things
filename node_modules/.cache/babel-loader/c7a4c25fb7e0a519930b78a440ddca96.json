{"ast":null,"code":"var _jsxFileName = \"/Users/kieran/Documents/Full Stack/course_work/Strangers.Things/src/components/CreateMessage.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { callApi } from \"../api\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateMessage = props => {\n  _s();\n\n  const postId = props.postId;\n  const [message, setMessage] = useState(\"\");\n\n  const handleMessageSubmit = async event => {\n    // handles submitting a message, checks if message field is blank, if so will return an error message and not run command.\n    event.preventDefault();\n\n    if (message === \"\") {\n      document.getElementById(\"float\").className = \"visible\";\n      document.getElementById(\"float\").innerText = \"Message Cannot Be Blank\";\n      setTimeout(function () {\n        document.getElementById(\"float\").className = \"hidden\";\n      }, 3500);\n      setMessage(\"\");\n      setClicked(false);\n    } else {\n      // if message is not blank will put it into an object and send it along with method, authentication token and url to fetch command\n      let messageInfo = {\n        message: {\n          content: `${message}`\n        }\n      }; // console.log(message)\n      // console.log(postId)\n\n      const data = await callApi({\n        url: `/posts/${postId}/messages`,\n        method: \"post\",\n        token: localStorage.getItem(\"myToken\"),\n        body: messageInfo\n      });\n      setMessage(\"\");\n      setClicked(false);\n\n      if (data.success) {\n        // if fetch command is succesful will create a notifiction on the page\n        document.getElementById(\"float\").className = \"visible\";\n        document.getElementById(\"float\").innerText = \"Message Sent\";\n        setTimeout(function () {\n          document.getElementById(\"float\").className = \"hidden\";\n        }, 3500);\n      }\n    }\n  };\n\n  const handleMessageChange = event => {\n    // handles updating message value as it is entered\n    setMessage(event.target.value);\n  }; // tracks wheter send message button is clicked\n\n\n  const [clicked, setClicked] = useState(false);\n\n  const displayMessageForm = () => {\n    // changes clicked state to true when button is clicked\n    // console.log(\"clicked\")\n    setClicked(true);\n  };\n\n  return (// generates send message button if button has not been clicked, when button is clicked generates the send message form and button to trigger api fetch command\n    clicked ? /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      sx: {\n        '& .MuiTextField-root': {\n          mt: .5,\n          width: '25ch'\n        }\n      },\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleMessageSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        required: true,\n        id: \"createmessage\",\n        multiline: true,\n        value: message,\n        onChange: handleMessageChange,\n        label: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          display: \"flex\"\n        },\n        size: \"small\",\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        m: .5\n      },\n      onClick: displayMessageForm,\n      size: \"small\",\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      children: \"Send a Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  );\n};\n\n_s(CreateMessage, \"1wAPJ6DFVn1m6lnGyieT96Ev3AA=\");\n\n_c = CreateMessage;\nexport default CreateMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateMessage\");","map":{"version":3,"sources":["/Users/kieran/Documents/Full Stack/course_work/Strangers.Things/src/components/CreateMessage.js"],"names":["useState","callApi","Box","TextField","Button","CreateMessage","props","postId","message","setMessage","handleMessageSubmit","event","preventDefault","document","getElementById","className","innerText","setTimeout","setClicked","messageInfo","content","data","url","method","token","localStorage","getItem","body","success","handleMessageChange","target","value","clicked","displayMessageForm","mt","width","display","m"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\nimport { callApi } from \"../api\"\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nconst CreateMessage = (props) => {\n    const postId = props.postId\n    const [message, setMessage] = useState(\"\")\n    const handleMessageSubmit = async (event) => {\n        // handles submitting a message, checks if message field is blank, if so will return an error message and not run command.\n        event.preventDefault()\n        if (message === \"\") {\n            document.getElementById(\"float\").className = \"visible\";\n            document.getElementById(\"float\").innerText = \"Message Cannot Be Blank\"\n            setTimeout(function () {\n                document.getElementById(\"float\").className = \"hidden\";\n            }, 3500)\n            setMessage(\"\")\n            setClicked(false)\n        } else {\n            // if message is not blank will put it into an object and send it along with method, authentication token and url to fetch command\n            let messageInfo = {\n                message: {\n                    content: `${message}`\n                }\n            }\n            // console.log(message)\n            // console.log(postId)\n            const data = await callApi({ url: `/posts/${postId}/messages`, method: \"post\", token: localStorage.getItem(\"myToken\"), body: messageInfo })\n            setMessage(\"\")\n            setClicked(false)\n            if (data.success) {\n                // if fetch command is succesful will create a notifiction on the page\n                document.getElementById(\"float\").className = \"visible\"\n                document.getElementById(\"float\").innerText = \"Message Sent\"\n                setTimeout(function () {\n                    document.getElementById(\"float\").className = \"hidden\";\n                }, 3500)\n            }\n        }\n    }\n\n    const handleMessageChange = (event) => {\n        // handles updating message value as it is entered\n        setMessage(event.target.value)\n    }\n    // tracks wheter send message button is clicked\n    const [clicked, setClicked] = useState(false)\n\n    const displayMessageForm = () => {\n        // changes clicked state to true when button is clicked\n        // console.log(\"clicked\")\n        setClicked(true)\n\n\n    }\n    return (\n        // generates send message button if button has not been clicked, when button is clicked generates the send message form and button to trigger api fetch command\n        clicked ?\n            <Box component=\"form\" sx={{\n                '& .MuiTextField-root': { mt: .5, width: '25ch' }\n            }} noValidate autoComplete=\"off\" onSubmit={handleMessageSubmit}>\n                <TextField\n                    required id=\"createmessage\"\n                    multiline value={message}\n                    onChange={handleMessageChange}\n                    label=\"Message:\"\n                />\n                <Button sx={{\n                    display: \"flex\"\n                }}\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\">Send Message</Button>\n\n            </Box>\n            :\n            <Button sx={{ m: .5 }} onClick={displayMessageForm} size=\"small\" variant=\"contained\" color=\"primary\" type=\"submit\">Send a Message</Button>\n    )\n}\n\n\nexport default CreateMessage"]},"metadata":{},"sourceType":"module"}