{"ast":null,"code":"var _jsxFileName = \"/Users/kieran/Documents/Full Stack/course_work/Strangers.Things/src/components/CreatePost.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { callApi } from \"../api\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport { experimentalStyled } from \"@mui/material\";\nimport { formatMuiErrorMessage } from \"@mui/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreatePost = props => {\n  _s();\n\n  // component for creating a new post. variables that handle the different form fields and props for generating the page with the new post\n  const loadedPosts = props.loadedPosts;\n  const setLoadedPosts = props.setLoadedPosts;\n  const setPostsToDisplay = props.setPostsToDisplay;\n  const [description, setDescription] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [willDeliver, setWillDeliver] = useState(false);\n\n  const goToTop = () => {\n    // function that handles the top of page button\n    document.body.scrollTop = 0;\n    document.documentElement.scrollTop = 0;\n  };\n\n  const handleSubmitNewPost = async event => {\n    // checks that none of the form fields are empty, then adds them to a post Object and sends it along with the method, key and url to the api fetch function. sets form fields and use states back to blank\n    if (title && description && location && price && title) {\n      event.preventDefault();\n      let postInfo = {\n        post: {\n          title: `${title}`,\n          description: `${description}`,\n          price: `${price}`,\n          location: `${location}`,\n          willDeliver: `${willDeliver}`\n        }\n      };\n      setTitle(\"\");\n      setDescription(\"\");\n      setPrice(\"\");\n      setLocation(\"\");\n      setWillDeliver(false);\n      const data = await callApi({\n        url: \"/posts\",\n        method: \"POST\",\n        token: localStorage.getItem(\"myToken\"),\n        body: postInfo\n      });\n\n      if (data.success) {\n        // if api fetch is succefull places a notification on page, if unsuccesfull will display an error\n        document.getElementsByClassName(\"hidden\")[0].className = \"visible\";\n        document.getElementById(\"float\").innerText = `Post has been created`;\n        setTimeout(function () {\n          document.getElementById(\"float\").className = \"hidden\";\n        }, 5000);\n      } else if (!data.success) {\n        document.getElementsByClassName(\"hidden\")[0].className = \"visible\";\n        document.getElementById(\"float\").innerText = `${data.message}`;\n        setTimeout(function () {\n          document.getElementById(\"float\").className = \"hidden\";\n        }, 3500);\n      } // regenerates the page with the new post added\n\n\n      setPostsToDisplay([data.data.post, ...loadedPosts]);\n      setLoadedPosts([data.data.post, ...loadedPosts]);\n    } else {\n      event.preventDefault();\n    }\n  }; // functions that handle the form fields being filled\n\n\n  const handleDescriptionChange = event => {\n    setDescription(event.target.value);\n  };\n\n  const handleLocationChange = event => {\n    setLocation(event.target.value);\n  };\n\n  const handlePriceChange = event => {\n    setPrice(event.target.value);\n  };\n\n  const handleTitleChange = event => {\n    setTitle(event.target.value);\n  };\n\n  const handleWillDeliverChange = event => {\n    setWillDeliver(event.target.checked);\n  };\n\n  return (// checks if user has a token, if so generates the create post form, if no token then nothing is generated\n    localStorage.getItem(\"myToken\") ? /*#__PURE__*/_jsxDEV(\"aside\", {\n      id: \"createpost\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"createposttitle\",\n        children: \"Create Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        noValidate: true,\n        autoComplete: \"off\",\n        id: \"createpostform\",\n        onSubmit: handleSubmitNewPost,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          id: \"createdescription\",\n          label: \"Description\",\n          value: description,\n          variant: \"standard\",\n          onChange: handleDescriptionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          id: \"createlocation\",\n          label: \"Location:\",\n          value: location,\n          variant: \"standard\",\n          onChange: handleLocationChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          id: \"createprice\",\n          label: \"Price:\",\n          value: price,\n          variant: \"standard\",\n          onChange: handlePriceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          id: \"createtitle\",\n          label: \"Title\",\n          value: title,\n          variant: \"standard\",\n          onChange: handleTitleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, {\n            value: willDeliver,\n            onChange: handleWillDeliverChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 48\n          }, this),\n          label: \"Will Deliver\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"submitcreatepostbtn\",\n          sx: {\n            mb: 2\n          },\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"small\",\n          type: \"submit\",\n          children: \"Submit Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"gototop\",\n        sx: {\n          mb: 2\n        },\n        variant: \"contained\",\n        color: \"success\",\n        size: \"small\",\n        type: \"submit\",\n        onClick: goToTop,\n        children: \"Top of Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  );\n};\n\n_s(CreatePost, \"P1ax2MaoAsC5jCB9TX0ngTp4eOA=\");\n\n_c = CreatePost;\nexport default CreatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"sources":["/Users/kieran/Documents/Full Stack/course_work/Strangers.Things/src/components/CreatePost.js"],"names":["useState","callApi","Box","TextField","Button","FormControlLabel","Checkbox","experimentalStyled","formatMuiErrorMessage","CreatePost","props","loadedPosts","setLoadedPosts","setPostsToDisplay","description","setDescription","location","setLocation","price","setPrice","title","setTitle","willDeliver","setWillDeliver","goToTop","document","body","scrollTop","documentElement","handleSubmitNewPost","event","preventDefault","postInfo","post","data","url","method","token","localStorage","getItem","success","getElementsByClassName","className","getElementById","innerText","setTimeout","message","handleDescriptionChange","target","value","handleLocationChange","handlePriceChange","handleTitleChange","handleWillDeliverChange","checked","mb"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\nimport { callApi } from \"../api\"\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport { experimentalStyled } from \"@mui/material\";\nimport { formatMuiErrorMessage } from \"@mui/utils\";\n\nconst CreatePost = (props) => {\n    // component for creating a new post. variables that handle the different form fields and props for generating the page with the new post\n    const loadedPosts = props.loadedPosts\n    const setLoadedPosts = props.setLoadedPosts\n    const setPostsToDisplay = props.setPostsToDisplay\n    const [description, setDescription] = useState(\"\")\n    const [location, setLocation] = useState(\"\")\n    const [price, setPrice] = useState(\"\")\n    const [title, setTitle] = useState(\"\")\n    const [willDeliver, setWillDeliver] = useState(false)\n\n    const goToTop = () => {\n        // function that handles the top of page button\n        document.body.scrollTop = 0;\n        document.documentElement.scrollTop = 0;\n    }\n    const handleSubmitNewPost = async (event) => {\n        // checks that none of the form fields are empty, then adds them to a post Object and sends it along with the method, key and url to the api fetch function. sets form fields and use states back to blank\n        if (title && description && location && price && title) {\n            event.preventDefault()\n            let postInfo = {\n                post: {\n                    title: `${title}`,\n                    description: `${description}`,\n                    price: `${price}`,\n                    location: `${location}`,\n                    willDeliver: `${willDeliver}`\n                }\n            }\n            setTitle(\"\")\n            setDescription(\"\")\n            setPrice(\"\")\n            setLocation(\"\")\n            setWillDeliver(false)\n            const data = await callApi({ url: \"/posts\", method: \"POST\", token: localStorage.getItem(\"myToken\"), body: postInfo })\n            if (data.success) {\n                // if api fetch is succefull places a notification on page, if unsuccesfull will display an error\n                document.getElementsByClassName(\"hidden\")[0].className = \"visible\"\n                document.getElementById(\"float\").innerText = `Post has been created`\n                setTimeout(function () {\n                    document.getElementById(\"float\").className = \"hidden\";\n                }, 5000)\n            } else if (!data.success) {\n                document.getElementsByClassName(\"hidden\")[0].className = \"visible\"\n                document.getElementById(\"float\").innerText = `${data.message}`\n                setTimeout(function () {\n                    document.getElementById(\"float\").className = \"hidden\";\n                }, 3500)\n            }\n            // regenerates the page with the new post added\n            setPostsToDisplay([data.data.post, ...loadedPosts])\n            setLoadedPosts([data.data.post, ...loadedPosts])\n        } else {\n            event.preventDefault()\n        }\n    }\n    // functions that handle the form fields being filled\n    const handleDescriptionChange = (event) => {\n        setDescription(event.target.value)\n    }\n    const handleLocationChange = (event) => {\n        setLocation(event.target.value)\n    }\n    const handlePriceChange = (event) => {\n        setPrice(event.target.value)\n    }\n    const handleTitleChange = (event) => {\n        setTitle(event.target.value)\n    }\n    const handleWillDeliverChange = (event) => {\n        setWillDeliver(event.target.checked)\n    }\n\n\n\n    return (\n        // checks if user has a token, if so generates the create post form, if no token then nothing is generated\n        localStorage.getItem(\"myToken\") ?\n            <aside id=\"createpost\">\n                <h1 id=\"createposttitle\">Create Post</h1>\n                <Box component=\"form\" noValidate autoComplete=\"off\" id=\"createpostform\" onSubmit={handleSubmitNewPost}>\n                    <TextField\n                        required\n                        id=\"createdescription\"\n                        label=\"Description\"\n                        value={description}\n                        variant=\"standard\"\n                        onChange={handleDescriptionChange}\n                    />\n                    <TextField\n                        required\n                        id=\"createlocation\"\n                        label=\"Location:\"\n                        value={location}\n                        variant=\"standard\"\n                        onChange={handleLocationChange}\n                    />\n                    <TextField\n                        required\n                        id=\"createprice\"\n                        label=\"Price:\"\n                        value={price}\n                        variant=\"standard\"\n                        onChange={handlePriceChange}\n                    />\n                    <TextField\n                        required\n                        id=\"createtitle\"\n                        label=\"Title\"\n                        value={title}\n                        variant=\"standard\"\n                        onChange={handleTitleChange}\n                    />\n                    <FormControlLabel control={<Checkbox value={willDeliver} onChange={handleWillDeliverChange} />} label=\"Will Deliver\" />\n                    <Button id=\"submitcreatepostbtn\" sx={{ mb: 2 }} variant=\"contained\" color=\"primary\" size=\"small\" type=\"submit\">Submit Post</Button>\n                </Box>\n                <Button id=\"gototop\" sx={{ mb: 2 }} variant=\"contained\" color=\"success\" size=\"small\" type=\"submit\" onClick={goToTop}>Top of Page</Button>\n\n            </aside> :\n            <></>\n    )\n}\n\n\n\nexport default CreatePost"]},"metadata":{},"sourceType":"module"}